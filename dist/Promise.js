//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('Promise', factory);
    else if (typeof module === 'object')
        return  module.exports = factory();
    else
        return  this['Promise'] = factory();

})(function () {

function merge(base, path) {

    return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {

        return input[index - 1] === '.' ? match : '';
    });
}

function outPackage(name) {
    return (/^[^./]/.test(name)
    );
}

    var require = _require_.bind(null, './');

    function _require_(base, path) {

        var module = _module_[
                outPackage( path )  ?  path  :  ('./' + merge(base, path))
            ],
            exports;

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = require( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    _require_.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _module_ = {
    './core': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.end = end;
            exports.follow = follow;
            exports.wrap = wrap;
            var top = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' ? window : global;

            var wait = top.requestIdleCallback || top.requestAnimationFrame || top.setImmediate || setTimeout;

            var _callback_ = exports._callback_ = new WeakMap();

            function end(type, result) {
                var _this = this;

                if (this.state > -1) return;

                this.state = type;

                this.result = result;

                wait(function () {

                    var func,
                        callback = _callback_.get(_this);

                    while (func = callback.shift()) {
                        func[type](result);
                    }
                });
            }

            function follow(value, resolve, reject) {

                if ((value || '').then instanceof Function) value.then(resolve, reject);else (this.state ? reject : resolve)(value);
            }

            function wrap(callback, resolve, reject) {
                var _this2 = this;

                return function (result) {

                    if (callback instanceof Function) try {

                        result = callback(result);
                    } catch (error) {
                        reject(error);
                    }

                    follow.call(_this2, result, resolve, reject);
                };
            }
        }
    },
    './Promise': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _core = require('./core');

            var Promise = function () {
                function Promise(main) {
                    _classCallCheck(this, Promise);

                    this.result = null, this.state = -1;

                    _core._callback_.set(this, []);

                    main(_core.end.bind(this, 0), _core.end.bind(this, 1));
                }

                _createClass(Promise, [{
                    key: 'then',
                    value: function then(resolve, reject) {
                        var _this3 = this;

                        return new Promise(function (_resolve_, _reject_) {

                            var callback = [_core.wrap.call(_this3, resolve, _resolve_, _reject_), _core.wrap.call(_this3, reject, _resolve_, _reject_)];

                            if (_this3.state < 0) _core._callback_.get(_this3).push(callback);else callback[_this3.state](_this3.result);
                        });
                    }
                }, {
                    key: 'catch',
                    value: function _catch(reject) {
                        return this.then(null, reject);
                    }
                }, {
                    key: 'finally',
                    value: function _finally(done) {
                        return this.then(done, done);
                    }
                }], [{
                    key: 'resolve',
                    value: function resolve(value) {

                        return value instanceof Promise ? value : new Promise(_core.follow.bind({ state: 0 }, value));
                    }
                }, {
                    key: 'reject',
                    value: function reject(error) {

                        return new Promise(function (resolve, reject) {
                            return reject(error);
                        });
                    }
                }]);

                return Promise;
            }();

            exports.default = Promise;
        }
    },
    './adapter': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.rejected = exports.resolved = undefined;
            exports.deferred = deferred;

            var _Promise = require('./Promise');

            var _Promise2 = _interopRequireDefault(_Promise);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            exports.default = _Promise2.default;
            var resolved = exports.resolved = _Promise2.default.resolve;

            var rejected = exports.rejected = _Promise2.default.reject;

            function deferred() {

                var resolve, reject;

                var promise = new _Promise2.default(function (done, fail) {
                    return resolve = done, reject = fail;
                });

                return { promise: promise, resolve: resolve, reject: reject };
            }
        }
    }
};

    return require('./adapter');
});